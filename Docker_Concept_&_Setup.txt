# Docker concept
---------------------

###Step:- INSTALLTION & CONFIGURATION:-

# apt update

# apt install docker.io -y

# service docker start

# service docker status

# apt update

# docker info     ##{to give configuration about docker machine}

# docker version    ##{gives version}

# docker search image_name      ##{search images locally than docker_hub}

# docker pull image_name      ##{pulling image from locally, if it's not their than look into docker hub}

##{instead off docker pull , we can directly use 'docker run' command, this will run both the command at a time}

# docker run ubuntu cat /etc/os          ##{to run a conatiner}
      OR
  docker container run ubuntu cat /etc/os-release

##{we are creating & running an container but once you come out from terminal, it will automatcally get stopped}

# docker ps       ##{list of running container}
       OR
  docker container ls

# docker ps -a      ##{list of all container}
       OR
  docker container ls -a  

# docker image history image_name    ##{to show the history of locally present image}

# docker rmi image_name     ##{to remove image which are not associated with any container}

# docker rmi -f image_name      ##{to remove image forecfully, which are associated with container}

# docker image inspect image_name       ##{compelet details of image}

# docker image prune       ##{to remove all unused image}    

# docker image save

# docker image load  

# docker run centos sleep 30         ##{running container only for 30 sec}

##{check before 30 sec}

# docker ps   

##{check after 30 sec

# docker ps  

# docker rm container_id/container_name      ##{removing container which are in stop state}
        OR
  docker container rm container_id/container_name
  
# docker rm $(docker ps -a -q)          ##{delete all stopped container}
        OR
  docker container prune            ##{delete all stopped container}
  
# docker rm -f container_id          ##{force delete the running container}

# docker system prune       ##{delete any resource like volume, container & network which are not associated with any container}

# docker start container_id/container_name      ##{start the container}
        OR
  docker container start container_id/container_name

# docker restart container_id            ##{restarting container}

# docker ps 

# docker stop container_id/container_name            ##{Stop/kill the container}
        OR
  docker container stop container_id/container_name
        OR
  docker kill container_id        ##{delete/Kill running container }

  
# docker wait container_id              ##{wait till container gets stopped} 

# docker ps

# docker run -d -it ubuntu /bin/bash

##{-d = detach mode, so u cn run container in background as well}
##{-it = intractive mode, so u cn communicate/intract /write somthing inside the container}
##{/bin/bash = to go inside the container}

##{now we are inside the container, so u cn write any command}

#$ apt install apche2 -y    

#$ exit  or   ctrl+d     ##{to exit}

# docker run -d nginx 

# docker inspect container_id        ##{details of container like:- date, ip, port status, time, process running, driver}

# docker logs container_id        ##{shows logs of the container}

# docker top container_id       ##{display the process which are runnning inside the container}

# docker stats    ##{shows all container memory, utilization, load}

# docker container export    ##{take the backup of file system but not for which are associated with volume}

### Check the logs of a Docker container:    ##{https://www.shellhacks.com/docker-container-logs-how-to-check}
# docker logs container

### Show the Docker container logs with timestamps:
# docker logs container --timestamps

### Show Docker logs since particular date:
# docker logs container --since YYYY-MM-DD

### Show Docker logs since particular time:
# docker logs container --since YYYY-MM-DDTHH:MM

##Example:- check Docker logs since 11 am:
# docker logs container --since 2018-01-30T11:00


### PORT MAPPING/ PORT FORWARDING
------------------------------------------------

# docker run -d -p 3600:80 nginx               ##{request hits on 3600 port but it will redirect on 80 called port mapping}
                   |    |                      ##{-P IS A static PORT ARGUMENT where -P is a dynamic(automatically) assign port}
  dokcer_machine_port container_port


# docker run -d -p 3600:80 --name test_container nginx       ##{assiging name to container}

# docker port container_id             ##{on which port container is running}

# docker exec -d -it container_id /bin/bash       ##{to go inside the "running container" and provide shall access}

#$ exit

# docker ps

# docker rename container_id conatiner_newname         ##{renaming the conatiner}

# docker ps

# docker attach container_id       ##{connecting terminal to container or getting inside of container but when u come out , container gets stopped}

# docker wait container_id       ##{gives exact status after container being stop}

# docker pause cpnatiner_id      ##{pause all the process which are runnning inside the container}

###{note u can not access the 'pause container', can verify by hitting the url}

# docker unpause container_id          ##{unpause all the process of the container}

# docker ps

# docker ps -a

# docker prune      ##{to delete all stop container}

# docker container port container_id           ##{to check port mapping of the container}


-----------------------------------------------------------------------------------------------------------------------------------------------

### Create container commands:-


# docker pull ubuntu          ##{to pull the image from locally & thn dokcer hub}

# docker create ubuntu        ##{to pull image & create container of it}

# docker run ubuntu          ##{to pull image, create a container & than run a container}

# docker diff container_id      ##{to check the filesystem about what is modifying, adding , deleting & etc in the container}

###{whatever modification is happing inside the container, that can be monitored by 'docker diff', you can check by adding or deleting the file/foler}
##{watch :- command monitored in every 2 sec }

# docker cp folder_name container_id:/tmp/             ##{copy the folder/file from machine to container's tmp foler}


----------------------------------------------------------------------------------------------------------------------------------------------

### Import/Export the container :-    ##{you can share your complete container with someone else}


# docker run -itd ubuntu /bin/bash       ##{running ubuntu container}

#$ apt update                       ##{running command inside the container}

#$ apt install tree git -y

#$ exit or ctrl+d

# docker ps


# docker container export container_id >myfile.tar       ##{exporting a container in a file. Name_of_file type is a filename}
        OR
  docker container export container_id -o myfile.tar

# ls -la

###{note:- now we can send the tar fil to ther person where he can use import command to use it}

### {note:- now will create a image from tar file & than will create a container from that newly created image}

# docker image import myfile.tar myimage

# docker images           ##{listing all images to chk myimage}

# docker run -itd myimage /bin/bash             ##{running a conatiner from myimage and ging inside}   

#$ cd /tmp

#$ tree           ##{verifing tree is avaialble}

#$ git --version         ##{verifing git is there or not}

#$ exit

# docker ps


------------------------------------------------------------------------------------------------------------------------------------


### Creating Image/snapshot/Backup from running container:


# docker run -itd ubuntu /bin/bash

#$ cd/tmp

#$ touch 1 2 3 4 5

#$ exit

# docker ps

# docker commit --author "ABHISHEK SINGH" -m "creating imgage from running container" container_id mynewimage          ##{committing the image named as mynewimage}#
             OR
  docker commit container_id newimagename:tag           ##{named new image and give tag}
  docker login
  docker push

# docker images

# docker container rm -rf container_id           ##{deleting running container}

# docker run -itd mynewimage /bin/bash           ##{running a container of mynewimage, which we have created above}

#$ cd/tmp

#$ ls

#$ exit


-------------------------------------------------------------------------------------------------------------------------------


### Pusing the image onto Dockerhub


# docker images

# docker image tag image_name dockerhub_username/mydockerimage

# docker images

# docker push dockerhub_username/mydockerimage

# docker login

# docker push dockerhub_username/mydockerimage


-----------------------------------------------------------------------------------------------------------------------------------------------


#### Docker File


# docker images

# vi Dockerfile

#$ FROM ubuntu:16.04          ##{base image}

#$ MAINTAINER ABHISHEK SINGH       ##{AUTHOR (OPTIONAL)}

#$ LABEl name="Abhishek Singh"       ##{optional}

#$ LABEL email="abhi13.rjpt@gmail.com"          ##{oprtional}

#$ ENV NAME ABHISHEK            

#$ ENV PASS password

#$ RUN apt-get update && apt install tree -y          ##{while building the image Runs commands execute}

#$ RUN touch test1.txt

#$ RUN touch test2.txt

#$ RUN echo "hi this is abhi"

#$ WORKDIR /tmp                      ##{It is a location from where all the command will execute till end in working directory,}

#$ RUN pwd>/tmp/test3.txt

#$ RUN apt-get update && apt-get install -y openssh-server && apt-get install -y python       

##{senerio:- 1st user should run as root and 2md user should run as abhishek}

#$ RUN useradd -d /home/abhishek -g root -G sudo -m -p $(echo "$PASS" | openssl passwd -1 -stdin) $NAME

#$ RUN whoami > /tmp/1stwhoami.txt

#$ USER $NAME  

#$ RUN whoami > /tmp/2ndwhoami.txt

#$ RUN  mkdir -p /tmp/project

#$ COPY testproject /tmp/project/

#$ ADD <url paste here>

#$ CMD ["python"]                   ##{command which execute after container creation}

:wq   ##{save & exit}

# docker image build -t myubuntu:13 .

# docker images

# docker container run -p -itd myubuntu:13 /bin/bash


------------------------------------------------------------------------------------------------


### DOCKER VOLUNE AND BIND-MOUNT ##############

## docker volume :- if we delete the container thn after we can attach it's the volume with new container. cuzz volume doesnt delete with container.

# docker volume ls                     ##{list of volume present}
         
# docker volume create ubuntu        ##{creating volume}

# docker volume inspect volume_id        ##{inspecting the "volume path"}

# docker run -itd -v volume_id:/volume_path mysql /bin/bash         ##{-v:-volume arguemt,}


## DOCKER BIND-MOUNT:- localhost share the datalocation with container so it can access through container, so if ur container is deleted, u can mount that local with new container

#example:- 
# mkdir project && cd project

# vi myfile.txt 
this is sample       {:wq save & exit}

# docker run -itd -v $(pwd):/tmp/myfolder mysql /bin/bash   
          OR
   pwd
   cd               <localhostpath>  <container path>
   docker run -itd -v /home/project:/tmp/myfolder mysql /bin/bash          ##{even myfolder is not there, container will automatically createb itself} 
   
# docker exec -it container_id /bin/bash

#$ apt update && ls

#$ cd tmp && ls

#$ samplefolder       

#$ ls                 {"check myfile is ther or not"}

--------------------------------------------------------------------------------------

#### DOCKER NETWORK ##########

## 3 type :- bride(default):- connection create b/w 2 container in same domain    (domain resoltion not allowd)
             overrely/host:- connection create b/w 2 container in different domain (domaine resolution not allowd)
             none (custome):- can communicate 2 container in same network because domain resolution allowd by defaiult

# docker network ls                 ##{list of all network}

# docker network create mynetwork           ##{creating new network named as mynetwork by default that will be bridge}

# docker network create -d bridge testnetwork          ##{can select your network driver by mentioning bride}
##{note:- u cn not create another host or none network cuzz only 1 host or none network is allowed for a instance}{also due to this these network con not connect to same and other network also}

# docker network inspect                                   ##{insppecting all detail regatding network}

# docker network rm network_name                          ##{deleting the network }

# docker network prune                                     ##{deleting all unused network}

# docker run -itd --network=mynetwork ubuntu /bin/bash           ##{adding a network with a container}

# docker run -itd --network=none ubuntu /bin/bash               ##{to create empty null network} 

# when u create a container by default that belong to bridge network.
EX:- docker run -itd ubuntu /bin/bash       ##{coms under bridge network}

# when u communicate 2 by default network like below command than u cant ping hostname bcoz DNS enable is not present in by default network. but can ping through ip.
EX:- docker run -itd ubuntu /bin/bash 

# when u create customize network and communicate 2 container to each other than it can comminucate with ip as well as hostname becoz DNS enable for customize network.

# u cn run nginx contaiiner without port mapping, if u r using "host network".
Ex:- docker run -itd --network=host nginx               ##{hit the ip only not any port, it doesnt allow port mapping}

     docker run -itd -p 4001:80 nginx              ##{assigning 4001 for port mapping to 80}
    
     dokcer run -itd -P nginx                    ##{automatically assign port for port mapping with 80}


### Connecting a container with 2 or many network########

# docker run -itd ubuntu                  ##{running a container with by default bridge network}

# docker network create mynetwork

# docker network ls

# docker network connect mynetwork container_id                ##{connecting mynetwork with container}

# docker inspect container_id

# docker network disconnect mynetwork container_id             ##{detaching a container with a network}
##{note:- host network can not connect to same and other network}
#{note:- none network can not connect to same and other network}
##{note:- only bridge network can connect to multiple brdige network only.}

----------------------------------------------------------------------------------------------------------------------------------------










## Docker interview question & Answere
---------------------------------------------------

Q.) How to check which Process and PID and Memory of process inside the container?
A.) docker top container_id

Q.) How to stop every process which are running inside the container of a running container?
A.) docker pause contianer_id      ##{container will not get stopped but process}

Q.) How to find what modification has been done inside or file system the contrainer?
A.) docker diff container_id

Q.) How to get into the existing running container?
A.) docker exec -it container_id /bin/bash
             OR
    docker attach container_id
    
Q.) How to get inside of existing stopped container?
A.) i.) docker start container_id           ##{first we need to start the container}
   ii.) docker exec -it container_id /bin/bash        ##{second need to enter the container}
   
   
Q.) How to Export & Import a container or backup/snapshot of container?
A.) docker export container_id >myfile.tar               ##{taking filesystem from container in a file}not volume only filesystem
    docker import myfile.tar myimage                   ##{importing filesystem from tar file into new image named as myimage}


Q.) How to take Image/Snapshot/Backup of your running container?
A.)  i.) docker run -itd ubuntu /bin/bash                           ##{first running a ubuntu container}
     i.) docker commit container_id usernameOf_dokcerhub/new_image_name:tag                   ##{commiting & creating new image}
    ii.) docker login                            #{login into dockerhub account & check docker images & push latest created image}
   iii.) docker push usernameOf_docker/new_image_name                ##{pusing the latest created image into dockerhub}
    iV.) docker pull usernameOf_docker/new_image_name              ##{pulling image from dockerhub even if u have deleted from locally}
     V.) docker run -itd usernameOf_docker/new_image_name /bin/bash                     ##{ruuning the container}
             OR
    i.) docker run -itd ubuntu /bin/bash
    i.) docker export container_id >newfile.tar                ##{taking backup of the file system acsept volume and tarring in a file}
    ii.) docker import newfile.tar new_image              ##{only importing the file system layer from tar file and creating new image}
   iii.) docker run -itd new_image /bin/bash               ##{running the container}       


Q.) How to save/backup/snapshot of your docker image?
A.) i.) docker save image_name > newfile.tar           ##{saving all the detail like layer, tag & history of image in a tar file }
   ii.) docker load < newfile.tar                ##{loading tar file with it's image detail in a docker enhgine}


Q.) How to copy a file from localhost to container AND Container to localhost?
A.)

Q.) Does container lose it's data while at the time of restart?
A.) No

Q.) Does all the container or data gets lost at the time of dockerhost restart?
A.) No but all the container will be in a stop state.


Q.) How to automatically start or enable container always at boot time of dockerhost/localhost/machine/server/ec2?
A.) change the docker restart-policies    https://codeburst.io/how-to-start-docker-containers-automatically-ec0545c392e4

Q.) Difference B/W RUN & CMD in dockerfile?
A.) RUN:- it executes while the time of image building
    CMD:- it execute after container creation
    
Q.) Creating a custome ubuntu image and installing nginx in RUN command than how to automatically start nginx & access the URL?
A.) Refer other github/docker/nginx file.

Q.) How to retrive data/volume, if container is deleted?OR How to bind mount form localhost if container is terminated? 
A.) when u delete the container, u cn retive volume cuzz volume doest delete with it 
    Take the container volume and create new container with that.
    i.) docker volume ls                        ##{list of all volume}
   ii.) docker inspect volume_id                               ##[findind the correct volume]
  iii.) docker inspect container_id               ##{to find docker's volume path}
   ii.) docker images                        
  iii.) docker image inspect mysql                                         ##{inspecting image to find the volume path in container}
   vi.) docker run -itd -v volume_id:/var/lib/mysql mysql /bin/bash       ##{ruuning new container and attached deleted container volume where -v argument of volume /var/lib/mysql is a container volume path and mysql is image}
  vii.) docker ps
 viii.) docker exec -it container_id /bin/bash                    ##{entering in container and checking old data}     
   xi.) apt update          ##after this , u can check the old data
   
                  OR    ALSO CALLED AS BIND MOUNT METHOD
                  
    i.) mkdir project            ##{creating a folder}
   ii.) cd project      
  iii.) vi test.txt                ##{creating a file so this file should be available}
  vi.) pwd                   ##{copy the localhost path}
  vi.) cd 
 vii.) docker run -itd -v /home/project/:/tmp/singh /bin/bash        ##{paste localhost path:container path(where u want the file)}
                         <localhostSRC    <container's path>
viii.) docker ps
  x.i) docker exec -it container_id /bin/bash
  xii.) apt update
 xiii.) ls 
 xvi.)  cd /tmp 
 xvii.) ls
xviii.) cd container
  xvv.)  ls                       ##{check wehather fikle is there or not}
 
    
Q.) How to dettach a volume from running container?
A.) 

Q.) How to create a network & attach with a container?
A.) docker network create mynetwork                  ##{creating new network}
    docker network ls                                 ##{list all network}
    docker run -itd --network=mynetwork ubuntu /bin/bash         ##{running & attaching a container with mynetwork}


Q.) How to communicate 2 different container?(same & different both network)
A)  same networ k=  bridge
    different network = host
    ping hostname
    ping ipadd
  
  
Q.) How to create 2 layer architucter in docker?{mysql and wordpress}
A.) i.) docker run -itd --name mysql_container -e MYSQL_ROOT_PASSWORD=password mysql:5.7 /bin/bash      ##{running mysql container}
   ii.) docker inspect container_id        ##{inspceting the ip of mysql container}
  iii.) docker run -itd --name wordpress_container -e WORDPRESS_DB_HOST<mysqlIPadd>:3306 -e WORDPRESS_DB_USER=root -e WORDPRESS_DB_PASSWORD=password wordpress          ##{running wordpress container with mysql ip, user and password}widout portmapping
                        OR  {u can use port mapping}
       docker run -itd -P --name wordpress_container -e WORDPRESS_DB_HOST<mysqlIPadd>:3306 -e WORDPRESS_DB_USER=root -e WORDPRESS_DB_PASSWORD=password wordpress     ##{running container with port mapping}                    
                        
   iv.) curl <localhostIP>:port       ##{verify by cli }
{ERROR:- browser thowing an database connection error
  
         

Q.) How to attach & dettach network from existing contaqiner? 
         OR
    How to connect & disconnect a container with 2 or multiple network?
A.) docker network create mynetwork                            ##{creating new_network named as mynetwork}
    docker network connect mynetwork container_id              ##{connecting mynetwork to running existing container}
    docker inspect container_id                                ##{inspecting both the network}
    docker network disconnect mynetwork container_id           ##{disconnecting mynetwork from container}
